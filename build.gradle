buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'info.solidsoft.gradle:cdeliveryboy:0.4.0'
        classpath('com.toomuchcoding:uptodate-gradle-plugin:1.0.1') {
            //Workaround: 0.7.2 is not available in Maven Central - https://github.com/marcingrzejszczak/uptodate-gradle-plugin/issues/2
            exclude group: 'org.codehaus.groovy.modules.http-builder', module: 'http-builder'
        }
    }
}

apply plugin: 'java'
apply plugin: 'osgi'
apply plugin: 'com.toomuchcoding.uptodate'
apply plugin: 'info.solidsoft.cdeliveryboy'

cDeliveryBoy {
    tasks {
        promoteRepositoryTask = "releaseRepository"
    }
    nexus {
        autoPromote = true
    }
}

nexusStaging {
    packageGroup = "info.solidsoft"
}

scmVersion {
    versionIncrementer 'incrementMinor'
    hooks {
        pre 'fileUpdate', [file: 'README.md', pattern: {v, c -> /'info\.solidsoft\.mockito:mockito-java8:$v'/},
                           replacement: {v, c -> "'info.solidsoft.mockito:mockito-java8:$v'"}]
        pre 'fileUpdate', [file: 'README.md', pattern: {v, c -> /<version>$v<\/version>$/},
                           replacement: {v, c -> "<version>$v</version>"}]
    }
}

project.group = "info.solidsoft.mockito"
project.version = scmVersion.version

ext.mockitoVersion = findProperty('mockitoVersion') ?: '2.8.47'

sourceCompatibility = 1.8

tasks.withType(JavaCompile) {
    options.compilerArgs << '-parameters'
}

repositories {
    mavenCentral()
}

Date buildDateAndTime = new Date()
ext.buildDate = buildDateAndTime.format('yyyy-MM-dd')
ext.buildTime = buildDateAndTime.format('HH:mm:ss.SSSZ')

jar {
    manifest {
        attributes(
            'Created-By': "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})".toString(),
            'Build-Date': buildDate,
            'Build-Time': buildTime,
            'Build-Revision': scmVersion.scmPosition.revision,
            'Specification-Title': project.name,
            'Specification-Version': project.version,
            'Specification-Vendor': 'SolidSoft.info',
            'Implementation-Title': project.name,
            'Implementation-Version': project.version,
            'Implementation-Vendor': 'SolidSoft.info',
            'Automatic-Module-Name': 'info.solidsoft.mockito.mockito-java8'
        )
    }
}

dependencies {
    compile "org.mockito:mockito-core:$mockitoVersion"
    compile 'net.jodah:typetools:0.5.0'

    testCompile 'junit:junit:4.12'
    testCompile 'org.assertj:assertj-core:3.8.0'
}

modifyPom {
    project {
        name 'Mockito-Java8'
        description 'Mockito add-ons leveraging Java 8 and lambda expressions to make mocking even more compact'
        url 'https://github.com/szpak/mockito-java8'
        inceptionYear '2015'

        scm {
            url 'https://github.com/szpak/mockito-java8'
            connection 'scm:https://github.com/szpak/mockito-java8'
            developerConnection 'scm:git://github.com/szpak/mockito-java8'
        }

        licenses {
            license {
                name 'The Apache Software License, Version 2.0'
                url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                distribution 'repo'
            }
        }

        developers {
            developer {
                id 'szpak'
                name 'Marcin ZajÄ…czkowski'
                email 'mszpak ATT wp DOTT pl'
                roles {
                    role 'developer'
                    role 'despot'
                }
            }
        }
    }
}

//Disable JavaDoc doclint on Java 8 - it fails on invalid JavaDoc elements in mockito-core jar
if (JavaVersion.current().isJava8Compatible()) {
    tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
    }
}

if (hasProperty('changelogSync')) {

    task syncChangelog(type: Exec) {
        doFirst { logger.info("Synchronizing changelog with GitHub for version ${project.version}") }
        commandLine 'chandler', 'push', "release/${project.version}", '--tag-prefix=release/'
    }

    syncChangelog {
        onlyIf { ciBuild.isInReleaseMode }
        mustRunAfter releaseRepository
    }
    ciBuild.dependsOn syncChangelog
}
